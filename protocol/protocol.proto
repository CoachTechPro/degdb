syntax = "proto3";

message Message {
  oneof message {
    PeerRequest peer_request = 1;
    PeerNotify peer_notify = 3;

    QueryRequest query_request = 4;
    QueryResponse query_response = 5;

    Handshake handshake = 6;

    InsertTriples insert_triples = 8;
  }
  // gossip is whether the message should be forwarded.
  bool gossip = 7;
  // sent_to is a list of murmur3 hashes that this message has already been sent to.
  repeated uint64 sent_to = 9;
  // error is if there was an error returned by the request.
  string error = 10;
  // response_to is the message this is a response to.
  uint64 response_to = 11;
  // id is the id of the message.
  uint64 id = 12;
  // response_required is whether a response is required.
  bool response_required = 13;
}

message Triple {
  string subj = 1;
  string pred = 2;
  string obj = 3;
  string lang = 4;
  string author = 5;
  string sig = 6;
}

message Peer {
  string id = 1;

  Keyspace keyspace = 2;
}

// Keyspace represents a range of values that a node has.
message Keyspace {
  uint64 start = 1;
  uint64 end = 2;
}

/*
  QueryRequest is a request for triple data.
  filter - is the data request.
  keyspace - is the range of topic ID hashes to provide.
  limit - max number of results to return.
*/
message QueryRequest {
  repeated ArrayOp steps = 1;
  int32 limit = 2;
  Keyspace keyspace = 3;
  enum Type {
    UNKNOWN = 0;
    BASIC = 1;
    GREMLIN = 2;
    MQL = 3;
  }
  Type type = 4;
  string query = 5;
}

message ArrayOp {
  repeated Triple triples = 1;
  repeated ArrayOp arguments = 2;
  enum Mode {
    OR = 0;
    AND = 1;
    NOT = 2; // NOT requires a single triple or argument.
  }
  Mode mode = 3;
}

message QueryResponse {
  repeated Triple triples = 1;
}

// PeerRequest requests peers with the optional keyspace and limit.
message PeerRequest {
  Keyspace keyspace = 1;
  int32 limit = 2;
}

message PeerNotify {
  repeated Peer peers = 1;
}

message Handshake {
  bool response = 1;
  Peer sender = 2;
}

message InsertTriples {
  repeated Triple triples = 1;
}
